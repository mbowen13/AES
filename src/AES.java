import java.io.*;
import java.util.Arrays;

import static java.lang.System.*;

public class AES {
	
    private final static byte[] sbox = {
            0x63, 0x7c, 0x77, 0x7b, (byte) 0xf2, 0x6b, 0x6f, (byte) 0xc5, 0x30, 0x01, 0x67, 0x2b, (byte) 0xfe, (byte) 0xd7, (byte) 0xab, 0x76,
            (byte) 0xca, (byte) 0x82, (byte) 0xc9, 0x7d, (byte) 0xfa, 0x59, 0x47, (byte) 0xf0, (byte) 0xad, (byte) 0xd4, (byte) 0xa2, (byte) 0xaf, (byte) 0x9c, (byte) 0xa4, 0x72, (byte) 0xc0,
            (byte) 0xb7, (byte) 0xfd, (byte) 0x93, 0x26, 0x36, 0x3f, (byte) 0xf7, (byte) 0xcc, 0x34, (byte) 0xa5, (byte) 0xe5, (byte) 0xf1, 0x71, (byte) 0xd8, 0x31, 0x15,
            0x04, (byte) 0xc7, 0x23, (byte) 0xc3, 0x18, (byte) 0x96, 0x05, (byte) 0x9a, 0x07, 0x12, (byte) 0x80, (byte) 0xe2, (byte) 0xeb, 0x27, (byte) 0xb2, 0x75,
            0x09, (byte) 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, (byte) 0xa0, 0x52, 0x3b, (byte) 0xd6, (byte) 0xb3, 0x29, (byte) 0xe3, 0x2f, (byte) 0x84,
            0x53, (byte) 0xd1, 0x00, (byte) 0xed, 0x20, (byte) 0xfc, (byte) 0xb1, 0x5b, 0x6a, (byte) 0xcb, (byte) 0xbe, 0x39, 0x4a, 0x4c, 0x58, (byte) 0xcf,
            (byte) 0xd0, (byte) 0xef, (byte) 0xaa, (byte) 0xfb, 0x43, 0x4d, 0x33, (byte) 0x85, 0x45, (byte) 0xf9, 0x02, 0x7f, 0x50, 0x3c, (byte) 0x9f, (byte) 0xa8,
            0x51, (byte) 0xa3, 0x40, (byte) 0x8f, (byte) 0x92, (byte) 0x9d, 0x38, (byte) 0xf5, (byte) 0xbc, (byte) 0xb6, (byte) 0xda, 0x21, 0x10, (byte) 0xff, (byte) 0xf3, (byte) 0xd2,
            (byte) 0xcd, 0x0c, 0x13, (byte) 0xec, 0x5f, (byte) 0x97, 0x44, 0x17, (byte) 0xc4, (byte) 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
            0x60, (byte) 0x81, 0x4f, (byte) 0xdc, 0x22, 0x2a, (byte) 0x90, (byte) 0x88, 0x46, (byte) 0xee, (byte) 0xb8, 0x14, (byte) 0xde, 0x5e, 0x0b, (byte) 0xdb,
            (byte) 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, (byte) 0xc2, (byte) 0xd3, (byte) 0xac, 0x62, (byte) 0x91, (byte) 0x95, (byte) 0xe4, 0x79,
            (byte) 0xe7, (byte) 0xc8, 0x37, 0x6d, (byte) 0x8d, (byte) 0xd5, 0x4e, (byte) 0xa9, 0x6c, 0x56, (byte) 0xf4, (byte) 0xea, 0x65, 0x7a, (byte) 0xae, 0x08,
            (byte) 0xba, 0x78, 0x25, 0x2e, 0x1c, (byte) 0xa6, (byte) 0xb4, (byte) 0xc6, (byte) 0xe8, (byte) 0xdd, 0x74, 0x1f, 0x4b, (byte) 0xbd, (byte) 0x8b, (byte) 0x8a,
            0x70, 0x3e, (byte) 0xb5, 0x66, 0x48, 0x03, (byte) 0xf6, 0x0e, 0x61, 0x35, 0x57, (byte) 0xb9, (byte) 0x86, (byte) 0xc1, 0x1d, (byte) 0x9e,
            (byte) 0xe1, (byte) 0xf8, (byte) 0x98, 0x11, 0x69, (byte) 0xd9, (byte) 0x8e, (byte) 0x94, (byte) 0x9b, 0x1e, (byte) 0x87, (byte) 0xe9, (byte) 0xce, 0x55, 0x28, (byte) 0xdf,
            (byte) 0x8c, (byte) 0xa1, (byte) 0x89, 0x0d, (byte) 0xbf, (byte) 0xe6, 0x42, 0x68, 0x41, (byte) 0x99, 0x2d, 0x0f, (byte) 0xb0, 0x54, (byte) 0xbb, 0x16
    };
	
    private final static byte invSbox[] = 
        {
           (byte) 0x52, (byte) 0x09, (byte) 0x6A, (byte) 0xD5, (byte) 0x30, (byte) 0x36, (byte) 0xA5, (byte) 0x38, (byte) 0xBF, (byte) 0x40, (byte) 0xA3, (byte) 0x9E, (byte) 0x81, (byte) 0xF3, (byte) 0xD7, (byte) 0xFB,
           (byte) 0x7C, (byte) 0xE3, (byte) 0x39, (byte) 0x82, (byte) 0x9B, (byte) 0x2F, (byte) 0xFF, (byte) 0x87, (byte) 0x34, (byte) 0x8E, (byte) 0x43, (byte) 0x44, (byte) 0xC4, (byte) 0xDE, (byte) 0xE9, (byte) 0xCB,
           (byte) 0x54, (byte) 0x7B, (byte) 0x94, (byte) 0x32, (byte) 0xA6, (byte) 0xC2, (byte) 0x23, (byte) 0x3D, (byte) 0xEE, (byte) 0x4C, (byte) 0x95, (byte) 0x0B, (byte) 0x42, (byte) 0xFA, (byte) 0xC3, (byte) 0x4E,
           (byte) 0x08, (byte) 0x2E, (byte) 0xA1, (byte) 0x66, (byte) 0x28, (byte) 0xD9, (byte) 0x24, (byte) 0xB2, (byte) 0x76, (byte) 0x5B, (byte) 0xA2, (byte) 0x49, (byte) 0x6D, (byte) 0x8B, (byte) 0xD1, (byte) 0x25,
           (byte) 0x72, (byte) 0xF8, (byte) 0xF6, (byte) 0x64, (byte) 0x86, (byte) 0x68, (byte) 0x98, (byte) 0x16, (byte) 0xD4, (byte) 0xA4, (byte) 0x5C, (byte) 0xCC, (byte) 0x5D, (byte) 0x65, (byte) 0xB6, (byte) 0x92,
           (byte) 0x6C, (byte) 0x70, (byte) 0x48, (byte) 0x50, (byte) 0xFD, (byte) 0xED, (byte) 0xB9, (byte) 0xDA, (byte) 0x5E, (byte) 0x15, (byte) 0x46, (byte) 0x57, (byte) 0xA7, (byte) 0x8D, (byte) 0x9D, (byte) 0x84,
           (byte) 0x90, (byte) 0xD8, (byte) 0xAB, (byte) 0x00, (byte) 0x8C, (byte) 0xBC, (byte) 0xD3, (byte) 0x0A, (byte) 0xF7, (byte) 0xE4, (byte) 0x58, (byte) 0x05, (byte) 0xB8, (byte) 0xB3, (byte) 0x45, (byte) 0x06,
           (byte) 0xD0, (byte) 0x2C, (byte) 0x1E, (byte) 0x8F, (byte) 0xCA, (byte) 0x3F, (byte) 0x0F, (byte) 0x02, (byte) 0xC1, (byte) 0xAF, (byte) 0xBD, (byte) 0x03, (byte) 0x01, (byte) 0x13, (byte) 0x8A, (byte) 0x6B,
           (byte) 0x3A, (byte) 0x91, (byte) 0x11, (byte) 0x41, (byte) 0x4F, (byte) 0x67, (byte) 0xDC, (byte) 0xEA, (byte) 0x97, (byte) 0xF2, (byte) 0xCF, (byte) 0xCE, (byte) 0xF0, (byte) 0xB4, (byte) 0xE6, (byte) 0x73,
           (byte) 0x96, (byte) 0xAC, (byte) 0x74, (byte) 0x22, (byte) 0xE7, (byte) 0xAD, (byte) 0x35, (byte) 0x85, (byte) 0xE2, (byte) 0xF9, (byte) 0x37, (byte) 0xE8, (byte) 0x1C, (byte) 0x75, (byte) 0xDF, (byte) 0x6E,
           (byte) 0x47, (byte) 0xF1, (byte) 0x1A, (byte) 0x71, (byte) 0x1D, (byte) 0x29, (byte) 0xC5, (byte) 0x89, (byte) 0x6F, (byte) 0xB7, (byte) 0x62, (byte) 0x0E, (byte) 0xAA, (byte) 0x18, (byte) 0xBE, (byte) 0x1B,
           (byte) 0xFC, (byte) 0x56, (byte) 0x3E, (byte) 0x4B, (byte) 0xC6, (byte) 0xD2, (byte) 0x79, (byte) 0x20, (byte) 0x9A, (byte) 0xDB, (byte) 0xC0, (byte) 0xFE, (byte) 0x78, (byte) 0xCD, (byte) 0x5A, (byte) 0xF4,
           (byte) 0x1F, (byte) 0xDD, (byte) 0xA8, (byte) 0x33, (byte) 0x88, (byte) 0x07, (byte) 0xC7, (byte) 0x31, (byte) 0xB1, (byte) 0x12, (byte) 0x10, (byte) 0x59, (byte) 0x27, (byte) 0x80, (byte) 0xEC, (byte) 0x5F,
           (byte) 0x60, (byte) 0x51, (byte) 0x7F, (byte) 0xA9, (byte) 0x19, (byte) 0xB5, (byte) 0x4A, (byte) 0x0D, (byte) 0x2D, (byte) 0xE5, (byte) 0x7A, (byte) 0x9F, (byte) 0x93, (byte) 0xC9, (byte) 0x9C, (byte) 0xEF,
           (byte) 0xA0, (byte) 0xE0, (byte) 0x3B, (byte) 0x4D, (byte) 0xAE, (byte) 0x2A, (byte) 0xF5, (byte) 0xB0, (byte) 0xC8, (byte) 0xEB, (byte) 0xBB, (byte) 0x3C, (byte) 0x83, (byte) 0x53, (byte) 0x99, (byte) 0x61,
           (byte) 0x17, (byte) 0x2B, (byte) 0x04, (byte) 0x7E, (byte) 0xBA, (byte) 0x77, (byte) 0xD6, (byte) 0x26, (byte) 0xE1, (byte) 0x69, (byte) 0x14, (byte) 0x63, (byte) 0x55, (byte) 0x21, (byte) 0x0C, (byte) 0x7D
        };
	
	private static final byte[] mul2= {  (byte) 0x00,(byte) 0x02,(byte) 0x04,(byte) 0x06,(byte) 0x08,(byte) 0x0a,(byte) 0x0c,(byte) 0x0e,(byte) 0x10,(byte) 0x12,(byte) 0x14,(byte) 0x16,(byte) 0x18,(byte) 0x1a,(byte) 0x1c,(byte) 0x1e,
            (byte) 0x20,(byte) 0x22,(byte) 0x24,(byte) 0x26,(byte) 0x28,(byte) 0x2a,(byte) 0x2c,(byte) 0x2e,(byte) 0x30,(byte) 0x32,(byte) 0x34,(byte) 0x36,(byte) 0x38,(byte) 0x3a,(byte) 0x3c,(byte) 0x3e,
            (byte) 0x40,(byte) 0x42,(byte) 0x44,(byte) 0x46,(byte) 0x48,(byte) 0x4a,(byte) 0x4c,(byte) 0x4e,(byte) 0x50,(byte) 0x52,(byte) 0x54,(byte) 0x56,(byte) 0x58,(byte) 0x5a,(byte) 0x5c,(byte) 0x5e,
            (byte) 0x60,(byte) 0x62,(byte) 0x64,(byte) 0x66,(byte) 0x68,(byte) 0x6a,(byte) 0x6c,(byte) 0x6e,(byte) 0x70,(byte) 0x72,(byte) 0x74,(byte) 0x76,(byte) 0x78,(byte) 0x7a,(byte) 0x7c,(byte) 0x7e,
            (byte) 0x80,(byte) 0x82,(byte) 0x84,(byte) 0x86,(byte) 0x88,(byte) 0x8a,(byte) 0x8c,(byte) 0x8e,(byte) 0x90,(byte) 0x92,(byte) 0x94,(byte) 0x96,(byte) 0x98,(byte) 0x9a,(byte) 0x9c,(byte) 0x9e,
            (byte) 0xa0,(byte) 0xa2,(byte) 0xa4,(byte) 0xa6,(byte) 0xa8,(byte) 0xaa,(byte) 0xac,(byte) 0xae,(byte) 0xb0,(byte) 0xb2,(byte) 0xb4,(byte) 0xb6,(byte) 0xb8,(byte) 0xba,(byte) 0xbc,(byte) 0xbe,
            (byte) 0xc0,(byte) 0xc2,(byte) 0xc4,(byte) 0xc6,(byte) 0xc8,(byte) 0xca,(byte) 0xcc,(byte) 0xce,(byte) 0xd0,(byte) 0xd2,(byte) 0xd4,(byte) 0xd6,(byte) 0xd8,(byte) 0xda,(byte) 0xdc,(byte) 0xde,
            (byte) 0xe0,(byte) 0xe2,(byte) 0xe4,(byte) 0xe6,(byte) 0xe8,(byte) 0xea,(byte) 0xec,(byte) 0xee,(byte) 0xf0,(byte) 0xf2,(byte) 0xf4,(byte) 0xf6,(byte) 0xf8,(byte) 0xfa,(byte) 0xfc,(byte) 0xfe,
            (byte) 0x1b,(byte) 0x19,(byte) 0x1f,(byte) 0x1d,(byte) 0x13,(byte) 0x11,(byte) 0x17,(byte) 0x15,(byte) 0x0b,(byte) 0x09,(byte) 0x0f,(byte) 0x0d,(byte) 0x03,(byte) 0x01,(byte) 0x07,(byte) 0x05,
            (byte) 0x3b,(byte) 0x39,(byte) 0x3f,(byte) 0x3d,(byte) 0x33,(byte) 0x31,(byte) 0x37,(byte) 0x35,(byte) 0x2b,(byte) 0x29,(byte) 0x2f,(byte) 0x2d,(byte) 0x23,(byte) 0x21,(byte) 0x27,(byte) 0x25,
            (byte) 0x5b,(byte) 0x59,(byte) 0x5f,(byte) 0x5d,(byte) 0x53,(byte) 0x51,(byte) 0x57,(byte) 0x55,(byte) 0x4b,(byte) 0x49,(byte) 0x4f,(byte) 0x4d,(byte) 0x43,(byte) 0x41,(byte) 0x47,(byte) 0x45,
            (byte) 0x7b,(byte) 0x79,(byte) 0x7f,(byte) 0x7d,(byte) 0x73,(byte) 0x71,(byte) 0x77,(byte) 0x75,(byte) 0x6b,(byte) 0x69,(byte) 0x6f,(byte) 0x6d,(byte) 0x63,(byte) 0x61,(byte) 0x67,(byte) 0x65,
            (byte) 0x9b,(byte) 0x99,(byte) 0x9f,(byte) 0x9d,(byte) 0x93,(byte) 0x91,(byte) 0x97,(byte) 0x95,(byte) 0x8b,(byte) 0x89,(byte) 0x8f,(byte) 0x8d,(byte) 0x83,(byte) 0x81,(byte) 0x87,(byte) 0x85,
            (byte) 0xbb,(byte) 0xb9,(byte) 0xbf,(byte) 0xbd,(byte) 0xb3,(byte) 0xb1,(byte) 0xb7,(byte) 0xb5,(byte) 0xab,(byte) 0xa9,(byte) 0xaf,(byte) 0xad,(byte) 0xa3,(byte) 0xa1,(byte) 0xa7,(byte) 0xa5,
            (byte) 0xdb,(byte) 0xd9,(byte) 0xdf,(byte) 0xdd,(byte) 0xd3,(byte) 0xd1,(byte) 0xd7,(byte) 0xd5,(byte) 0xcb,(byte) 0xc9,(byte) 0xcf,(byte) 0xcd,(byte) 0xc3,(byte) 0xc1,(byte) 0xc7,(byte) 0xc5,
            (byte) 0xfb,(byte) 0xf9,(byte) 0xff,(byte) 0xfd,(byte) 0xf3,(byte) 0xf1,(byte) 0xf7,(byte) 0xf5,(byte) 0xeb,(byte) 0xe9,(byte) 0xef,(byte) 0xed,(byte) 0xe3,(byte) 0xe1,(byte) 0xe7,(byte) 0xe5 
    };
    
    private static final byte[] mul3 = {
            (byte) 0x00,(byte) 0x03,(byte) 0x06,(byte) 0x05,(byte) 0x0c,(byte) 0x0f,(byte) 0x0a,(byte) 0x09,(byte) 0x18,(byte) 0x1b,(byte) 0x1e,(byte) 0x1d,(byte) 0x14,(byte) 0x17,(byte) 0x12,(byte) 0x11,
            (byte) 0x30,(byte) 0x33,(byte) 0x36,(byte) 0x35,(byte) 0x3c,(byte) 0x3f,(byte) 0x3a,(byte) 0x39,(byte) 0x28,(byte) 0x2b,(byte) 0x2e,(byte) 0x2d,(byte) 0x24,(byte) 0x27,(byte) 0x22,(byte) 0x21,
            (byte) 0x60,(byte) 0x63,(byte) 0x66,(byte) 0x65,(byte) 0x6c,(byte) 0x6f,(byte) 0x6a,(byte) 0x69,(byte) 0x78,(byte) 0x7b,(byte) 0x7e,(byte) 0x7d,(byte) 0x74,(byte) 0x77,(byte) 0x72,(byte) 0x71,
            (byte) 0x50,(byte) 0x53,(byte) 0x56,(byte) 0x55,(byte) 0x5c,(byte) 0x5f,(byte) 0x5a,(byte) 0x59,(byte) 0x48,(byte) 0x4b,(byte) 0x4e,(byte) 0x4d,(byte) 0x44,(byte) 0x47,(byte) 0x42,(byte) 0x41,
            (byte) 0xc0,(byte) 0xc3,(byte) 0xc6,(byte) 0xc5,(byte) 0xcc,(byte) 0xcf,(byte) 0xca,(byte) 0xc9,(byte) 0xd8,(byte) 0xdb,(byte) 0xde,(byte) 0xdd,(byte) 0xd4,(byte) 0xd7,(byte) 0xd2,(byte) 0xd1,
            (byte) 0xf0,(byte) 0xf3,(byte) 0xf6,(byte) 0xf5,(byte) 0xfc,(byte) 0xff,(byte) 0xfa,(byte) 0xf9,(byte) 0xe8,(byte) 0xeb,(byte) 0xee,(byte) 0xed,(byte) 0xe4,(byte) 0xe7,(byte) 0xe2,(byte) 0xe1,
            (byte) 0xa0,(byte) 0xa3,(byte) 0xa6,(byte) 0xa5,(byte) 0xac,(byte) 0xaf,(byte) 0xaa,(byte) 0xa9,(byte) 0xb8,(byte) 0xbb,(byte) 0xbe,(byte) 0xbd,(byte) 0xb4,(byte) 0xb7,(byte) 0xb2,(byte) 0xb1,
            (byte) 0x90,(byte) 0x93,(byte) 0x96,(byte) 0x95,(byte) 0x9c,(byte) 0x9f,(byte) 0x9a,(byte) 0x99,(byte) 0x88,(byte) 0x8b,(byte) 0x8e,(byte) 0x8d,(byte) 0x84,(byte) 0x87,(byte) 0x82,(byte) 0x81,
            (byte) 0x9b,(byte) 0x98,(byte) 0x9d,(byte) 0x9e,(byte) 0x97,(byte) 0x94,(byte) 0x91,(byte) 0x92,(byte) 0x83,(byte) 0x80,(byte) 0x85,(byte) 0x86,(byte) 0x8f,(byte) 0x8c,(byte) 0x89,(byte) 0x8a,
            (byte) 0xab,(byte) 0xa8,(byte) 0xad,(byte) 0xae,(byte) 0xa7,(byte) 0xa4,(byte) 0xa1,(byte) 0xa2,(byte) 0xb3,(byte) 0xb0,(byte) 0xb5,(byte) 0xb6,(byte) 0xbf,(byte) 0xbc,(byte) 0xb9,(byte) 0xba,
            (byte) 0xfb,(byte) 0xf8,(byte) 0xfd,(byte) 0xfe,(byte) 0xf7,(byte) 0xf4,(byte) 0xf1,(byte) 0xf2,(byte) 0xe3,(byte) 0xe0,(byte) 0xe5,(byte) 0xe6,(byte) 0xef,(byte) 0xec,(byte) 0xe9,(byte) 0xea,
            (byte) 0xcb,(byte) 0xc8,(byte) 0xcd,(byte) 0xce,(byte) 0xc7,(byte) 0xc4,(byte) 0xc1,(byte) 0xc2,(byte) 0xd3,(byte) 0xd0,(byte) 0xd5,(byte) 0xd6,(byte) 0xdf,(byte) 0xdc,(byte) 0xd9,(byte) 0xda,
            (byte) 0x5b,(byte) 0x58,(byte) 0x5d,(byte) 0x5e,(byte) 0x57,(byte) 0x54,(byte) 0x51,(byte) 0x52,(byte) 0x43,(byte) 0x40,(byte) 0x45,(byte) 0x46,(byte) 0x4f,(byte) 0x4c,(byte) 0x49,(byte) 0x4a,
            (byte) 0x6b,(byte) 0x68,(byte) 0x6d,(byte) 0x6e,(byte) 0x67,(byte) 0x64,(byte) 0x61,(byte) 0x62,(byte) 0x73,(byte) 0x70,(byte) 0x75,(byte) 0x76,(byte) 0x7f,(byte) 0x7c,(byte) 0x79,(byte) 0x7a,
            (byte) 0x3b,(byte) 0x38,(byte) 0x3d,(byte) 0x3e,(byte) 0x37,(byte) 0x34,(byte) 0x31,(byte) 0x32,(byte) 0x23,(byte) 0x20,(byte) 0x25,(byte) 0x26,(byte) 0x2f,(byte) 0x2c,(byte) 0x29,(byte) 0x2a,
            (byte) 0x0b,(byte) 0x08,(byte) 0x0d,(byte) 0x0e,(byte) 0x07,(byte) 0x04,(byte) 0x01,(byte) 0x02,(byte) 0x13,(byte) 0x10,(byte) 0x15,(byte) 0x16,(byte) 0x1f,(byte) 0x1c,(byte) 0x19,(byte) 0x1a
    };
	
    private static final byte[] mul9 = {
            (byte) 0x00,(byte) 0x09,(byte) 0x12,(byte) 0x1b,(byte) 0x24,(byte) 0x2d,(byte) 0x36,(byte) 0x3f,(byte) 0x48,(byte) 0x41,(byte) 0x5a,(byte) 0x53,(byte) 0x6c,(byte) 0x65,(byte) 0x7e,(byte) 0x77,
            (byte) 0x90,(byte) 0x99,(byte) 0x82,(byte) 0x8b,(byte) 0xb4,(byte) 0xbd,(byte) 0xa6,(byte) 0xaf,(byte) 0xd8,(byte) 0xd1,(byte) 0xca,(byte) 0xc3,(byte) 0xfc,(byte) 0xf5,(byte) 0xee,(byte) 0xe7,
            (byte) 0x3b,(byte) 0x32,(byte) 0x29,(byte) 0x20,(byte) 0x1f,(byte) 0x16,(byte) 0x0d,(byte) 0x04,(byte) 0x73,(byte) 0x7a,(byte) 0x61,(byte) 0x68,(byte) 0x57,(byte) 0x5e,(byte) 0x45,(byte) 0x4c,
            (byte) 0xab,(byte) 0xa2,(byte) 0xb9,(byte) 0xb0,(byte) 0x8f,(byte) 0x86,(byte) 0x9d,(byte) 0x94,(byte) 0xe3,(byte) 0xea,(byte) 0xf1,(byte) 0xf8,(byte) 0xc7,(byte) 0xce,(byte) 0xd5,(byte) 0xdc,
            (byte) 0x76,(byte) 0x7f,(byte) 0x64,(byte) 0x6d,(byte) 0x52,(byte) 0x5b,(byte) 0x40,(byte) 0x49,(byte) 0x3e,(byte) 0x37,(byte) 0x2c,(byte) 0x25,(byte) 0x1a,(byte) 0x13,(byte) 0x08,(byte) 0x01,
            (byte) 0xe6,(byte) 0xef,(byte) 0xf4,(byte) 0xfd,(byte) 0xc2,(byte) 0xcb,(byte) 0xd0,(byte) 0xd9,(byte) 0xae,(byte) 0xa7,(byte) 0xbc,(byte) 0xb5,(byte) 0x8a,(byte) 0x83,(byte) 0x98,(byte) 0x91,
            (byte) 0x4d,(byte) 0x44,(byte) 0x5f,(byte) 0x56,(byte) 0x69,(byte) 0x60,(byte) 0x7b,(byte) 0x72,(byte) 0x05,(byte) 0x0c,(byte) 0x17,(byte) 0x1e,(byte) 0x21,(byte) 0x28,(byte) 0x33,(byte) 0x3a,
            (byte) 0xdd,(byte) 0xd4,(byte) 0xcf,(byte) 0xc6,(byte) 0xf9,(byte) 0xf0,(byte) 0xeb,(byte) 0xe2,(byte) 0x95,(byte) 0x9c,(byte) 0x87,(byte) 0x8e,(byte) 0xb1,(byte) 0xb8,(byte) 0xa3,(byte) 0xaa,
            (byte) 0xec,(byte) 0xe5,(byte) 0xfe,(byte) 0xf7,(byte) 0xc8,(byte) 0xc1,(byte) 0xda,(byte) 0xd3,(byte) 0xa4,(byte) 0xad,(byte) 0xb6,(byte) 0xbf,(byte) 0x80,(byte) 0x89,(byte) 0x92,(byte) 0x9b,
            (byte) 0x7c,(byte) 0x75,(byte) 0x6e,(byte) 0x67,(byte) 0x58,(byte) 0x51,(byte) 0x4a,(byte) 0x43,(byte) 0x34,(byte) 0x3d,(byte) 0x26,(byte) 0x2f,(byte) 0x10,(byte) 0x19,(byte) 0x02,(byte) 0x0b,
            (byte) 0xd7,(byte) 0xde,(byte) 0xc5,(byte) 0xcc,(byte) 0xf3,(byte) 0xfa,(byte) 0xe1,(byte) 0xe8,(byte) 0x9f,(byte) 0x96,(byte) 0x8d,(byte) 0x84,(byte) 0xbb,(byte) 0xb2,(byte) 0xa9,(byte) 0xa0,
            (byte) 0x47,(byte) 0x4e,(byte) 0x55,(byte) 0x5c,(byte) 0x63,(byte) 0x6a,(byte) 0x71,(byte) 0x78,(byte) 0x0f,(byte) 0x06,(byte) 0x1d,(byte) 0x14,(byte) 0x2b,(byte) 0x22,(byte) 0x39,(byte) 0x30,
            (byte) 0x9a,(byte) 0x93,(byte) 0x88,(byte) 0x81,(byte) 0xbe,(byte) 0xb7,(byte) 0xac,(byte) 0xa5,(byte) 0xd2,(byte) 0xdb,(byte) 0xc0,(byte) 0xc9,(byte) 0xf6,(byte) 0xff,(byte) 0xe4,(byte) 0xed,
            (byte) 0x0a,(byte) 0x03,(byte) 0x18,(byte) 0x11,(byte) 0x2e,(byte) 0x27,(byte) 0x3c,(byte) 0x35,(byte) 0x42,(byte) 0x4b,(byte) 0x50,(byte) 0x59,(byte) 0x66,(byte) 0x6f,(byte) 0x74,(byte) 0x7d,
            (byte) 0xa1,(byte) 0xa8,(byte) 0xb3,(byte) 0xba,(byte) 0x85,(byte) 0x8c,(byte) 0x97,(byte) 0x9e,(byte) 0xe9,(byte) 0xe0,(byte) 0xfb,(byte) 0xf2,(byte) 0xcd,(byte) 0xc4,(byte) 0xdf,(byte) 0xd6,
            (byte) 0x31,(byte) 0x38,(byte) 0x23,(byte) 0x2a,(byte) 0x15,(byte) 0x1c,(byte) 0x07,(byte) 0x0e,(byte) 0x79,(byte) 0x70,(byte) 0x6b,(byte) 0x62,(byte) 0x5d,(byte) 0x54,(byte) 0x4f,(byte) 0x46
    };
    
    private static final byte[] mul11 = {
            (byte) 0x00,(byte) 0x0b,(byte) 0x16,(byte) 0x1d,(byte) 0x2c,(byte) 0x27,(byte) 0x3a,(byte) 0x31,(byte) 0x58,(byte) 0x53,(byte) 0x4e,(byte) 0x45,(byte) 0x74,(byte) 0x7f,(byte) 0x62,(byte) 0x69,
            (byte) 0xb0,(byte) 0xbb,(byte) 0xa6,(byte) 0xad,(byte) 0x9c,(byte) 0x97,(byte) 0x8a,(byte) 0x81,(byte) 0xe8,(byte) 0xe3,(byte) 0xfe,(byte) 0xf5,(byte) 0xc4,(byte) 0xcf,(byte) 0xd2,(byte) 0xd9,
            (byte) 0x7b,(byte) 0x70,(byte) 0x6d,(byte) 0x66,(byte) 0x57,(byte) 0x5c,(byte) 0x41,(byte) 0x4a,(byte) 0x23,(byte) 0x28,(byte) 0x35,(byte) 0x3e,(byte) 0x0f,(byte) 0x04,(byte) 0x19,(byte) 0x12,
            (byte) 0xcb,(byte) 0xc0,(byte) 0xdd,(byte) 0xd6,(byte) 0xe7,(byte) 0xec,(byte) 0xf1,(byte) 0xfa,(byte) 0x93,(byte) 0x98,(byte) 0x85,(byte) 0x8e,(byte) 0xbf,(byte) 0xb4,(byte) 0xa9,(byte) 0xa2,
            (byte) 0xf6,(byte) 0xfd,(byte) 0xe0,(byte) 0xeb,(byte) 0xda,(byte) 0xd1,(byte) 0xcc,(byte) 0xc7,(byte) 0xae,(byte) 0xa5,(byte) 0xb8,(byte) 0xb3,(byte) 0x82,(byte) 0x89,(byte) 0x94,(byte) 0x9f,
            (byte) 0x46,(byte) 0x4d,(byte) 0x50,(byte) 0x5b,(byte) 0x6a,(byte) 0x61,(byte) 0x7c,(byte) 0x77,(byte) 0x1e,(byte) 0x15,(byte) 0x08,(byte) 0x03,(byte) 0x32,(byte) 0x39,(byte) 0x24,(byte) 0x2f,
            (byte) 0x8d,(byte) 0x86,(byte) 0x9b,(byte) 0x90,(byte) 0xa1,(byte) 0xaa,(byte) 0xb7,(byte) 0xbc,(byte) 0xd5,(byte) 0xde,(byte) 0xc3,(byte) 0xc8,(byte) 0xf9,(byte) 0xf2,(byte) 0xef,(byte) 0xe4,
            (byte) 0x3d,(byte) 0x36,(byte) 0x2b,(byte) 0x20,(byte) 0x11,(byte) 0x1a,(byte) 0x07,(byte) 0x0c,(byte) 0x65,(byte) 0x6e,(byte) 0x73,(byte) 0x78,(byte) 0x49,(byte) 0x42,(byte) 0x5f,(byte) 0x54,
            (byte) 0xf7,(byte) 0xfc,(byte) 0xe1,(byte) 0xea,(byte) 0xdb,(byte) 0xd0,(byte) 0xcd,(byte) 0xc6,(byte) 0xaf,(byte) 0xa4,(byte) 0xb9,(byte) 0xb2,(byte) 0x83,(byte) 0x88,(byte) 0x95,(byte) 0x9e,
            (byte) 0x47,(byte) 0x4c,(byte) 0x51,(byte) 0x5a,(byte) 0x6b,(byte) 0x60,(byte) 0x7d,(byte) 0x76,(byte) 0x1f,(byte) 0x14,(byte) 0x09,(byte) 0x02,(byte) 0x33,(byte) 0x38,(byte) 0x25,(byte) 0x2e,
            (byte) 0x8c,(byte) 0x87,(byte) 0x9a,(byte) 0x91,(byte) 0xa0,(byte) 0xab,(byte) 0xb6,(byte) 0xbd,(byte) 0xd4,(byte) 0xdf,(byte) 0xc2,(byte) 0xc9,(byte) 0xf8,(byte) 0xf3,(byte) 0xee,(byte) 0xe5,
            (byte) 0x3c,(byte) 0x37,(byte) 0x2a,(byte) 0x21,(byte) 0x10,(byte) 0x1b,(byte) 0x06,(byte) 0x0d,(byte) 0x64,(byte) 0x6f,(byte) 0x72,(byte) 0x79,(byte) 0x48,(byte) 0x43,(byte) 0x5e,(byte) 0x55,
            (byte) 0x01,(byte) 0x0a,(byte) 0x17,(byte) 0x1c,(byte) 0x2d,(byte) 0x26,(byte) 0x3b,(byte) 0x30,(byte) 0x59,(byte) 0x52,(byte) 0x4f,(byte) 0x44,(byte) 0x75,(byte) 0x7e,(byte) 0x63,(byte) 0x68,
            (byte) 0xb1,(byte) 0xba,(byte) 0xa7,(byte) 0xac,(byte) 0x9d,(byte) 0x96,(byte) 0x8b,(byte) 0x80,(byte) 0xe9,(byte) 0xe2,(byte) 0xff,(byte) 0xf4,(byte) 0xc5,(byte) 0xce,(byte) 0xd3,(byte) 0xd8,
            (byte) 0x7a,(byte) 0x71,(byte) 0x6c,(byte) 0x67,(byte) 0x56,(byte) 0x5d,(byte) 0x40,(byte) 0x4b,(byte) 0x22,(byte) 0x29,(byte) 0x34,(byte) 0x3f,(byte) 0x0e,(byte) 0x05,(byte) 0x18,(byte) 0x13,
            (byte) 0xca,(byte) 0xc1,(byte) 0xdc,(byte) 0xd7,(byte) 0xe6,(byte) 0xed,(byte) 0xf0,(byte) 0xfb,(byte) 0x92,(byte) 0x99,(byte) 0x84,(byte) 0x8f,(byte) 0xbe,(byte) 0xb5,(byte) 0xa8,(byte) 0xa3
    };
    
    private static final byte[] mul13 = {
            (byte) 0x00,(byte) 0x0d,(byte) 0x1a,(byte) 0x17,(byte) 0x34,(byte) 0x39,(byte) 0x2e,(byte) 0x23,(byte) 0x68,(byte) 0x65,(byte) 0x72,(byte) 0x7f,(byte) 0x5c,(byte) 0x51,(byte) 0x46,(byte) 0x4b,
            (byte) 0xd0,(byte) 0xdd,(byte) 0xca,(byte) 0xc7,(byte) 0xe4,(byte) 0xe9,(byte) 0xfe,(byte) 0xf3,(byte) 0xb8,(byte) 0xb5,(byte) 0xa2,(byte) 0xaf,(byte) 0x8c,(byte) 0x81,(byte) 0x96,(byte) 0x9b,
            (byte) 0xbb,(byte) 0xb6,(byte) 0xa1,(byte) 0xac,(byte) 0x8f,(byte) 0x82,(byte) 0x95,(byte) 0x98,(byte) 0xd3,(byte) 0xde,(byte) 0xc9,(byte) 0xc4,(byte) 0xe7,(byte) 0xea,(byte) 0xfd,(byte) 0xf0,
            (byte) 0x6b,(byte) 0x66,(byte) 0x71,(byte) 0x7c,(byte) 0x5f,(byte) 0x52,(byte) 0x45,(byte) 0x48,(byte) 0x03,(byte) 0x0e,(byte) 0x19,(byte) 0x14,(byte) 0x37,(byte) 0x3a,(byte) 0x2d,(byte) 0x20,
            (byte) 0x6d,(byte) 0x60,(byte) 0x77,(byte) 0x7a,(byte) 0x59,(byte) 0x54,(byte) 0x43,(byte) 0x4e,(byte) 0x05,(byte) 0x08,(byte) 0x1f,(byte) 0x12,(byte) 0x31,(byte) 0x3c,(byte) 0x2b,(byte) 0x26,
            (byte) 0xbd,(byte) 0xb0,(byte) 0xa7,(byte) 0xaa,(byte) 0x89,(byte) 0x84,(byte) 0x93,(byte) 0x9e,(byte) 0xd5,(byte) 0xd8,(byte) 0xcf,(byte) 0xc2,(byte) 0xe1,(byte) 0xec,(byte) 0xfb,(byte) 0xf6,
            (byte) 0xd6,(byte) 0xdb,(byte) 0xcc,(byte) 0xc1,(byte) 0xe2,(byte) 0xef,(byte) 0xf8,(byte) 0xf5,(byte) 0xbe,(byte) 0xb3,(byte) 0xa4,(byte) 0xa9,(byte) 0x8a,(byte) 0x87,(byte) 0x90,(byte) 0x9d,
            (byte) 0x06,(byte) 0x0b,(byte) 0x1c,(byte) 0x11,(byte) 0x32,(byte) 0x3f,(byte) 0x28,(byte) 0x25,(byte) 0x6e,(byte) 0x63,(byte) 0x74,(byte) 0x79,(byte) 0x5a,(byte) 0x57,(byte) 0x40,(byte) 0x4d,
            (byte) 0xda,(byte) 0xd7,(byte) 0xc0,(byte) 0xcd,(byte) 0xee,(byte) 0xe3,(byte) 0xf4,(byte) 0xf9,(byte) 0xb2,(byte) 0xbf,(byte) 0xa8,(byte) 0xa5,(byte) 0x86,(byte) 0x8b,(byte) 0x9c,(byte) 0x91,
            (byte) 0x0a,(byte) 0x07,(byte) 0x10,(byte) 0x1d,(byte) 0x3e,(byte) 0x33,(byte) 0x24,(byte) 0x29,(byte) 0x62,(byte) 0x6f,(byte) 0x78,(byte) 0x75,(byte) 0x56,(byte) 0x5b,(byte) 0x4c,(byte) 0x41,
            (byte) 0x61,(byte) 0x6c,(byte) 0x7b,(byte) 0x76,(byte) 0x55,(byte) 0x58,(byte) 0x4f,(byte) 0x42,(byte) 0x09,(byte) 0x04,(byte) 0x13,(byte) 0x1e,(byte) 0x3d,(byte) 0x30,(byte) 0x27,(byte) 0x2a,
            (byte) 0xb1,(byte) 0xbc,(byte) 0xab,(byte) 0xa6,(byte) 0x85,(byte) 0x88,(byte) 0x9f,(byte) 0x92,(byte) 0xd9,(byte) 0xd4,(byte) 0xc3,(byte) 0xce,(byte) 0xed,(byte) 0xe0,(byte) 0xf7,(byte) 0xfa,
            (byte) 0xb7,(byte) 0xba,(byte) 0xad,(byte) 0xa0,(byte) 0x83,(byte) 0x8e,(byte) 0x99,(byte) 0x94,(byte) 0xdf,(byte) 0xd2,(byte) 0xc5,(byte) 0xc8,(byte) 0xeb,(byte) 0xe6,(byte) 0xf1,(byte) 0xfc,
            (byte) 0x67,(byte) 0x6a,(byte) 0x7d,(byte) 0x70,(byte) 0x53,(byte) 0x5e,(byte) 0x49,(byte) 0x44,(byte) 0x0f,(byte) 0x02,(byte) 0x15,(byte) 0x18,(byte) 0x3b,(byte) 0x36,(byte) 0x21,(byte) 0x2c,
            (byte) 0x0c,(byte) 0x01,(byte) 0x16,(byte) 0x1b,(byte) 0x38,(byte) 0x35,(byte) 0x22,(byte) 0x2f,(byte) 0x64,(byte) 0x69,(byte) 0x7e,(byte) 0x73,(byte) 0x50,(byte) 0x5d,(byte) 0x4a,(byte) 0x47,
            (byte) 0xdc,(byte) 0xd1,(byte) 0xc6,(byte) 0xcb,(byte) 0xe8,(byte) 0xe5,(byte) 0xf2,(byte) 0xff,(byte) 0xb4,(byte) 0xb9,(byte) 0xae,(byte) 0xa3,(byte) 0x80,(byte) 0x8d,(byte) 0x9a,(byte) 0x97
    };
    
    private static final byte[] mul14 = {
            (byte) 0x00,(byte) 0x0e,(byte) 0x1c,(byte) 0x12,(byte) 0x38,(byte) 0x36,(byte) 0x24,(byte) 0x2a,(byte) 0x70,(byte) 0x7e,(byte) 0x6c,(byte) 0x62,(byte) 0x48,(byte) 0x46,(byte) 0x54,(byte) 0x5a,
            (byte) 0xe0,(byte) 0xee,(byte) 0xfc,(byte) 0xf2,(byte) 0xd8,(byte) 0xd6,(byte) 0xc4,(byte) 0xca,(byte) 0x90,(byte) 0x9e,(byte) 0x8c,(byte) 0x82,(byte) 0xa8,(byte) 0xa6,(byte) 0xb4,(byte) 0xba,
            (byte) 0xdb,(byte) 0xd5,(byte) 0xc7,(byte) 0xc9,(byte) 0xe3,(byte) 0xed,(byte) 0xff,(byte) 0xf1,(byte) 0xab,(byte) 0xa5,(byte) 0xb7,(byte) 0xb9,(byte) 0x93,(byte) 0x9d,(byte) 0x8f,(byte) 0x81,
            (byte) 0x3b,(byte) 0x35,(byte) 0x27,(byte) 0x29,(byte) 0x03,(byte) 0x0d,(byte) 0x1f,(byte) 0x11,(byte) 0x4b,(byte) 0x45,(byte) 0x57,(byte) 0x59,(byte) 0x73,(byte) 0x7d,(byte) 0x6f,(byte) 0x61,
            (byte) 0xad,(byte) 0xa3,(byte) 0xb1,(byte) 0xbf,(byte) 0x95,(byte) 0x9b,(byte) 0x89,(byte) 0x87,(byte) 0xdd,(byte) 0xd3,(byte) 0xc1,(byte) 0xcf,(byte) 0xe5,(byte) 0xeb,(byte) 0xf9,(byte) 0xf7,
            (byte) 0x4d,(byte) 0x43,(byte) 0x51,(byte) 0x5f,(byte) 0x75,(byte) 0x7b,(byte) 0x69,(byte) 0x67,(byte) 0x3d,(byte) 0x33,(byte) 0x21,(byte) 0x2f,(byte) 0x05,(byte) 0x0b,(byte) 0x19,(byte) 0x17,
            (byte) 0x76,(byte) 0x78,(byte) 0x6a,(byte) 0x64,(byte) 0x4e,(byte) 0x40,(byte) 0x52,(byte) 0x5c,(byte) 0x06,(byte) 0x08,(byte) 0x1a,(byte) 0x14,(byte) 0x3e,(byte) 0x30,(byte) 0x22,(byte) 0x2c,
            (byte) 0x96,(byte) 0x98,(byte) 0x8a,(byte) 0x84,(byte) 0xae,(byte) 0xa0,(byte) 0xb2,(byte) 0xbc,(byte) 0xe6,(byte) 0xe8,(byte) 0xfa,(byte) 0xf4,(byte) 0xde,(byte) 0xd0,(byte) 0xc2,(byte) 0xcc,
            (byte) 0x41,(byte) 0x4f,(byte) 0x5d,(byte) 0x53,(byte) 0x79,(byte) 0x77,(byte) 0x65,(byte) 0x6b,(byte) 0x31,(byte) 0x3f,(byte) 0x2d,(byte) 0x23,(byte) 0x09,(byte) 0x07,(byte) 0x15,(byte) 0x1b,
            (byte) 0xa1,(byte) 0xaf,(byte) 0xbd,(byte) 0xb3,(byte) 0x99,(byte) 0x97,(byte) 0x85,(byte) 0x8b,(byte) 0xd1,(byte) 0xdf,(byte) 0xcd,(byte) 0xc3,(byte) 0xe9,(byte) 0xe7,(byte) 0xf5,(byte) 0xfb,
            (byte) 0x9a,(byte) 0x94,(byte) 0x86,(byte) 0x88,(byte) 0xa2,(byte) 0xac,(byte) 0xbe,(byte) 0xb0,(byte) 0xea,(byte) 0xe4,(byte) 0xf6,(byte) 0xf8,(byte) 0xd2,(byte) 0xdc,(byte) 0xce,(byte) 0xc0,
            (byte) 0x7a,(byte) 0x74,(byte) 0x66,(byte) 0x68,(byte) 0x42,(byte) 0x4c,(byte) 0x5e,(byte) 0x50,(byte) 0x0a,(byte) 0x04,(byte) 0x16,(byte) 0x18,(byte) 0x32,(byte) 0x3c,(byte) 0x2e,(byte) 0x20,
            (byte) 0xec,(byte) 0xe2,(byte) 0xf0,(byte) 0xfe,(byte) 0xd4,(byte) 0xda,(byte) 0xc8,(byte) 0xc6,(byte) 0x9c,(byte) 0x92,(byte) 0x80,(byte) 0x8e,(byte) 0xa4,(byte) 0xaa,(byte) 0xb8,(byte) 0xb6,
            (byte) 0x0c,(byte) 0x02,(byte) 0x10,(byte) 0x1e,(byte) 0x34,(byte) 0x3a,(byte) 0x28,(byte) 0x26,(byte) 0x7c,(byte) 0x72,(byte) 0x60,(byte) 0x6e,(byte) 0x44,(byte) 0x4a,(byte) 0x58,(byte) 0x56,
            (byte) 0x37,(byte) 0x39,(byte) 0x2b,(byte) 0x25,(byte) 0x0f,(byte) 0x01,(byte) 0x13,(byte) 0x1d,(byte) 0x47,(byte) 0x49,(byte) 0x5b,(byte) 0x55,(byte) 0x7f,(byte) 0x71,(byte) 0x63,(byte) 0x6d,
            (byte) 0xd7,(byte) 0xd9,(byte) 0xcb,(byte) 0xc5,(byte) 0xef,(byte) 0xe1,(byte) 0xf3,(byte) 0xfd,(byte) 0xa7,(byte) 0xa9,(byte) 0xbb,(byte) 0xb5,(byte) 0x9f,(byte) 0x91,(byte) 0x83,(byte) 0x8d
    };
	

        private static final byte rcon[] = {
           (byte) 0x8d, (byte) 0x01, (byte) 0x02, (byte) 0x04, (byte) 0x08, (byte) 0x10, (byte) 0x20, (byte) 0x40, (byte) 0x80, (byte) 0x1b, (byte) 0x36, (byte) 0x6c, (byte) 0xd8, (byte) 0xab, (byte) 0x4d, (byte) 0x9a, 
           (byte) 0x2f, (byte) 0x5e, (byte) 0xbc, (byte) 0x63, (byte) 0xc6, (byte) 0x97, (byte) 0x35, (byte) 0x6a, (byte) 0xd4, (byte) 0xb3, (byte) 0x7d, (byte) 0xfa, (byte) 0xef, (byte) 0xc5, (byte) 0x91, (byte) 0x39, 
           (byte) 0x72, (byte) 0xe4, (byte) 0xd3, (byte) 0xbd, (byte) 0x61, (byte) 0xc2, (byte) 0x9f, (byte) 0x25, (byte) 0x4a, (byte) 0x94, (byte) 0x33, (byte) 0x66, (byte) 0xcc, (byte) 0x83, (byte) 0x1d, (byte) 0x3a, 
           (byte) 0x74, (byte) 0xe8, (byte) 0xcb, (byte) 0x8d, (byte) 0x01, (byte) 0x02, (byte) 0x04, (byte) 0x08, (byte) 0x10, (byte) 0x20, (byte) 0x40, (byte) 0x80, (byte) 0x1b, (byte) 0x36, (byte) 0x6c, (byte) 0xd8, 
           (byte) 0xab, (byte) 0x4d, (byte) 0x9a, (byte) 0x2f, (byte) 0x5e, (byte) 0xbc, (byte) 0x63, (byte) 0xc6, (byte) 0x97, (byte) 0x35, (byte) 0x6a, (byte) 0xd4, (byte) 0xb3, (byte) 0x7d, (byte) 0xfa, (byte) 0xef, 
           (byte) 0xc5, (byte) 0x91, (byte) 0x39, (byte) 0x72, (byte) 0xe4, (byte) 0xd3, (byte) 0xbd, (byte) 0x61, (byte) 0xc2, (byte) 0x9f, (byte) 0x25, (byte) 0x4a, (byte) 0x94, (byte) 0x33, (byte) 0x66, (byte) 0xcc, 
           (byte) 0x83, (byte) 0x1d, (byte) 0x3a, (byte) 0x74, (byte) 0xe8, (byte) 0xcb, (byte) 0x8d, (byte) 0x01, (byte) 0x02, (byte) 0x04, (byte) 0x08, (byte) 0x10, (byte) 0x20, (byte) 0x40, (byte) 0x80, (byte) 0x1b, 
           (byte) 0x36, (byte) 0x6c, (byte) 0xd8, (byte) 0xab, (byte) 0x4d, (byte) 0x9a, (byte) 0x2f, (byte) 0x5e, (byte) 0xbc, (byte) 0x63, (byte) 0xc6, (byte) 0x97, (byte) 0x35, (byte) 0x6a, (byte) 0xd4, (byte) 0xb3, 
           (byte) 0x7d, (byte) 0xfa, (byte) 0xef, (byte) 0xc5, (byte) 0x91, (byte) 0x39, (byte) 0x72, (byte) 0xe4, (byte) 0xd3, (byte) 0xbd, (byte) 0x61, (byte) 0xc2, (byte) 0x9f, (byte) 0x25, (byte) 0x4a, (byte) 0x94, 
           (byte) 0x33, (byte) 0x66, (byte) 0xcc, (byte) 0x83, (byte) 0x1d, (byte) 0x3a, (byte) 0x74, (byte) 0xe8, (byte) 0xcb, (byte) 0x8d, (byte) 0x01, (byte) 0x02, (byte) 0x04, (byte) 0x08, (byte) 0x10, (byte) 0x20, 
           (byte) 0x40, (byte) 0x80, (byte) 0x1b, (byte) 0x36, (byte) 0x6c, (byte) 0xd8, (byte) 0xab, (byte) 0x4d, (byte) 0x9a, (byte) 0x2f, (byte) 0x5e, (byte) 0xbc, (byte) 0x63, (byte) 0xc6, (byte) 0x97, (byte) 0x35, 
           (byte) 0x6a, (byte) 0xd4, (byte) 0xb3, (byte) 0x7d, (byte) 0xfa, (byte) 0xef, (byte) 0xc5, (byte) 0x91, (byte) 0x39, (byte) 0x72, (byte) 0xe4, (byte) 0xd3, (byte) 0xbd, (byte) 0x61, (byte) 0xc2, (byte) 0x9f, 
           (byte) 0x25, (byte) 0x4a, (byte) 0x94, (byte) 0x33, (byte) 0x66, (byte) 0xcc, (byte) 0x83, (byte) 0x1d, (byte) 0x3a, (byte) 0x74, (byte) 0xe8, (byte) 0xcb, (byte) 0x8d, (byte) 0x01, (byte) 0x02, (byte) 0x04, 
           (byte) 0x08, (byte) 0x10, (byte) 0x20, (byte) 0x40, (byte) 0x80, (byte) 0x1b, (byte) 0x36, (byte) 0x6c, (byte) 0xd8, (byte) 0xab, (byte) 0x4d, (byte) 0x9a, (byte) 0x2f, (byte) 0x5e, (byte) 0xbc, (byte) 0x63, 
           (byte) 0xc6, (byte) 0x97, (byte) 0x35, (byte) 0x6a, (byte) 0xd4, (byte) 0xb3, (byte) 0x7d, (byte) 0xfa, (byte) 0xef, (byte) 0xc5, (byte) 0x91, (byte) 0x39, (byte) 0x72, (byte) 0xe4, (byte) 0xd3, (byte) 0xbd, 
           (byte) 0x61, (byte) 0xc2, (byte) 0x9f, (byte) 0x25, (byte) 0x4a, (byte) 0x94, (byte) 0x33, (byte) 0x66, (byte) 0xcc, (byte) 0x83, (byte) 0x1d, (byte) 0x3a, (byte) 0x74, (byte) 0xe8, (byte) 0xcb, (byte) 0x8d
       };
	
	
	public AES() {
		
	}
	
	// state is 4x4 array
	private static void subBytes(byte[][] state) {
//		out.println("before subytes");
//		for(int i = 0; i < 4; i++) {
//			out.println(state[i][0] + " " + state[i][1] + " " + state[i][2] + " " + state[i][3]);
//		}
		
		for(int i = 0; i < 4; i++) {
			for(int j = 0; j < 4; j++ ) {
				state[i][j] = sbox[state[i][j] & 0xff]; // ?
			}
		}
		
//		out.println("after subytes");
//		for(int i = 0; i < 4; i++) {
//			out.println(state[i][0] + " " + state[i][1] + " " + state[i][2] + " " + state[i][3]);
//		}
		
		// debug
		out.println("After subBytes:");
		// out.println(buildString(state).toUpperCase());
		printBinary(state);
	}
	
	private static void invSubBytes(byte[][] state) {
		for(int i = 0; i < 4; i++) {
			for(int j = 0; j < 4; j++) {
				state[j][i] = invSbox[state[j][i] & 0xff];
			}
		}
		
		out.println("After invSubBytes:");
		// out.println(buildString(state).toUpperCase());
		printBinary(state);
	}
	
	private static void shiftRows(byte[][] state) {
		byte[][] tmp = new byte[4][4];
		
//		out.println("before shiftrows");
//		for(int i = 0; i < 4; i++) {
//			out.println(state[i][0] + " " + state[i][1] + " " + state[i][2] + " " + state[i][3]);
//		}
		
		// R0
		tmp[0][0] = state[0][0];
		tmp[0][1] = state[0][1];
		tmp[0][2] = state[0][2];
		tmp[0][3] = state[0][3];
		
		// R1
		tmp[1][0] = state[1][1];
		tmp[1][1] = state[1][2];
		tmp[1][2] = state[1][3];
		tmp[1][3] = state[1][0];
		
		// R2
		tmp[2][0] = state[2][2];
		tmp[2][1] = state[2][3];
		tmp[2][2] = state[2][0];
		tmp[2][3] = state[2][1];
				
		// R3
		tmp[3][0] = state[3][3];
		tmp[3][1] = state[3][0];
		tmp[3][2] = state[3][1];
		tmp[3][3] = state[3][2];
		
		// copy back
		for(int i = 0; i < 4; i++) {
			for(int j = 0; j < 4; j++) {
				state[i][j] = tmp[i][j];
			}
		}
		
//		out.println("after shift rows");
//		for(int i = 0; i < 4; i++) {
//			out.println(state[i][0] + " " + state[i][1] + " " + state[i][2] + " " + state[i][3]);
//		}
		
		// debug
		out.println("After shiftRows:");
		// out.println(buildString(state).toUpperCase());
		printBinary(state);
	}
	
	private static void invShiftRows(byte[][] state) {
		byte[][] tmp = new byte[4][4];
		
//		// shift 
//		for(int i = 0; i < 4; i++) {
//			for(int j = 0; j < 4; j++) {
//				tmp[i][j] = state[i][(j+i) % 4];
//			}
//		}
//		
//		// copy back
//		for(int i = 0; i < 4; i++) {
//			for(int j = 0; j < 4; j++) {
//				state[i][j] = tmp[i][j];
//			}
//		}
		

		// R0 no change
		tmp[0][0] = state[0][0];
		tmp[0][1] = state[0][1];
		tmp[0][2] = state[0][2];
		tmp[0][3] = state[0][3];
		
		// R1 1 right
		tmp[1][0] = state[1][3];
		tmp[1][1] = state[1][0];
		tmp[1][2] = state[1][1];
		tmp[1][3] = state[1][2];
		
		// R2 2 right
		tmp[2][0] = state[2][2];
		tmp[2][1] = state[2][3];
		tmp[2][2] = state[2][0];
		tmp[2][3] = state[2][1];
				
		// R3 3 right
		tmp[3][0] = state[3][1];
		tmp[3][1] = state[3][2];
		tmp[3][2] = state[3][3];
		tmp[3][3] = state[3][0];
		
		// copy back
		for(int i = 0; i < 4; i++) {
			for(int j = 0; j < 4; j++) {
				state[i][j] = tmp[i][j];
			}
		}
		
		// debug
		out.println("After invShiftRows:");
		// out.println(buildString(state).toUpperCase());
		printBinary(state);
	}
	
	private static void mixColumns(byte[][] state) {
//		char[] vector;
//		// create vector for multiplication against Galoi Fields
//		for(int j = 0; j < 4; j++) {
//			vector = new char[] {state[0][j], state[1][j], state[2][j], state[3][j]};
//			state[0][j] = (char) ((char) mul2[vector[0]] ^ mul3[vector[1]] ^ vector[2] ^ vector[3]);
//			state[1][j] = (char) ((char) vector[0] ^ mul2[vector[1]] ^ mul3[vector[3]] ^ vector[3]);
//			state[2][j] = (char) ((char) vector[0] ^ vector[1] ^ mul2[vector[2]] ^ mul3[vector[3]]);
//			state[3][j] = (char) ((char) mul3[vector[0]] ^ vector[1] ^ vector[2] ^ mul2[vector[3]]);
//		}
		
		byte[][] tmp = new byte[4][4];
		
		 tmp[0][0] = (byte)(mul2[state[0][0] & 0xff] ^ mul3[state[1][0] & 0xff] ^ state[2][0] ^ state[3][0]);
		 tmp[1][0] = (byte)(state[0][0] ^ mul2[state[1][0] & 0xff] ^ mul3[state[2][0] & 0xff] ^ state[3][0]);
		 tmp[2][0] = (byte)(state[0][0] ^ state[1][0] ^ mul2[state[2][0] & 0xff] ^ mul3[state[3][0] & 0xff]);
		 tmp[3][0] = (byte)(mul3[state[0][0] & 0xff] ^ state[1][0] ^ state[2][0] ^ mul2[state[3][0] & 0xff]);

		 tmp[0][1] = (byte)(mul2[state[0][1] & 0xff] ^ mul3[state[1][1] & 0xff] ^ state[2][1] ^ state[3][1]);
		 tmp[1][1] = (byte)(state[0][1] ^ mul2[state[1][1] & 0xff] ^ mul3[state[2][1] & 0xff] ^ state[3][1]);
		 tmp[2][1] = (byte)(state[0][1] ^ state[1][1] ^ mul2[state[2][1] & 0xff] ^ mul3[state[3][1] & 0xff]);
		 tmp[3][1] = (byte)(mul3[state[0][1] & 0xff] ^ state[1][1] ^ state[2][1] ^ mul2[state[3][1] & 0xff]);

		 tmp[0][2] = (byte)(mul2[state[0][2] & 0xff] ^ mul3[state[1][2] & 0xff] ^ state[2][2] ^ state[3][2]);
		 tmp[1][2] = (byte)(state[0][2] ^ mul2[state[1][2] & 0xff] ^ mul3[state[2][2] & 0xff] ^ state[3][2]);
		 tmp[2][2] = (byte)(state[0][2] ^ state[1][2] ^ mul2[state[2][2] & 0xff] ^ mul3[state[3][2] & 0xff]);
		 tmp[3][2] = (byte)(mul3[state[0][2] & 0xff] ^ state[1][2] ^ state[2][2] ^ mul2[state[3][2] & 0xff]);

		 tmp[0][3] = (byte)(mul2[state[0][3] & 0xff] ^ mul3[state[1][3] & 0xff] ^ state[2][3] ^ state[3][3]);
		 tmp[1][3] = (byte)(state[0][3] ^ mul2[state[1][3] & 0xff] ^ mul3[state[2][3] & 0xff] ^ state[3][3]);
		 tmp[2][3] = (byte)(state[0][3] ^ state[1][3] ^ mul2[state[2][3] & 0xff] ^ mul3[state[3][3] & 0xff]);
		 tmp[3][3] = (byte)(mul3[state[0][3] & 0xff] ^ state[1][3] ^ state[2][3] ^ mul2[state[3][3] & 0xff]);
		
		 
		 for(int i = 0; i < 4; i++) {
			 for(int j = 0; j < 4; j++) {
				 state[i][j] = tmp[i][j];
			 }
		 }
		 
		// debug
		out.println("After mixColumns:");
		// out.println(buildString(state).toUpperCase());
		printBinary(state);
	}
	
	private static void invMixColumns(byte[][] state) {
		byte[][] tmp = new byte[4][4];
		
		tmp[0][0] = (byte)(mul14[state[0][0] & 0xff] ^ mul11[state[1][0] & 0xff] ^ mul13[state[2][0] & 0xff] ^ mul9[state[3][0] & 0xff]);
        tmp[1][0] = (byte)(mul9[state[0][0] & 0xff] ^ mul14[state[1][0] & 0xff] ^ mul11[state[2][0] & 0xff] ^ mul13[state[3][0] & 0xff]);
        tmp[2][0] = (byte)(mul13[state[0][0] & 0xff] ^ mul9[state[1][0] & 0xff] ^ mul14[state[2][0] & 0xff] ^ mul11[state[3][0] & 0xff]);
        tmp[3][0] = (byte)(mul11[state[0][0] & 0xff] ^ mul13[state[1][0] & 0xff] ^ mul9[state[2][0] & 0xff] ^ mul14[state[3][0] & 0xff]);

        tmp[0][1] = (byte)(mul14[state[0][1] & 0xff] ^ mul11[state[1][1] & 0xff] ^ mul13[state[2][1] & 0xff] ^ mul9[state[3][1] & 0xff]);
        tmp[1][1] = (byte)(mul9[state[0][1] & 0xff] ^ mul14[state[1][1] & 0xff] ^ mul11[state[2][1] & 0xff] ^ mul13[state[3][1] & 0xff]);
        tmp[2][1] = (byte)(mul13[state[0][1] & 0xff] ^ mul9[state[1][1] & 0xff] ^ mul14[state[2][1] & 0xff] ^ mul11[state[3][1] & 0xff]);
        tmp[3][1] = (byte)(mul11[state[0][1] & 0xff] ^ mul13[state[1][1] & 0xff] ^ mul9[state[2][1] & 0xff] ^ mul14[state[3][1] & 0xff]);
        
        tmp[0][2] = (byte)(mul14[state[0][2] & 0xff] ^ mul11[state[1][2] & 0xff] ^ mul13[state[2][2] & 0xff] ^ mul9[state[3][2] & 0xff]);
        tmp[1][2] = (byte)(mul9[state[0][2] & 0xff] ^ mul14[state[1][2] & 0xff] ^ mul11[state[2][2] & 0xff] ^ mul13[state[3][2] & 0xff]);
        tmp[2][2] = (byte)(mul13[state[0][2] & 0xff] ^ mul9[state[1][2] & 0xff] ^ mul14[state[2][2] & 0xff] ^ mul11[state[3][2] & 0xff]);
        tmp[3][2] = (byte)(mul11[state[0][2] & 0xff] ^ mul13[state[1][2] & 0xff] ^ mul9[state[2][2] & 0xff] ^ mul14[state[3][2] & 0xff]);
        
        tmp[0][3] = (byte)(mul14[state[0][3] & 0xff] ^ mul11[state[1][3] & 0xff] ^ mul13[state[2][3] & 0xff] ^ mul9[state[3][3] & 0xff]);
        tmp[1][3] = (byte)(mul9[state[0][3] & 0xff] ^ mul14[state[1][3] & 0xff] ^ mul11[state[2][3] & 0xff] ^ mul13[state[3][3] & 0xff]);
        tmp[2][3] = (byte)(mul13[state[0][3] & 0xff] ^ mul9[state[1][3] & 0xff] ^ mul14[state[2][3] & 0xff] ^ mul11[state[3][3] & 0xff]);
        tmp[3][3] = (byte)(mul11[state[0][3] & 0xff] ^ mul13[state[1][3] & 0xff] ^ mul9[state[2][3] & 0xff] ^ mul14[state[3][3] & 0xff]);
		
		for(int i = 0; i < 4; i++) {
			 for(int j = 0; j < 4; j++) {
				 state[i][j] = tmp[i][j];
			 }
		 }
		
		out.println("After invMixColumns:");
		// out.println(buildString(state).toUpperCase());
		printBinary(state);
	}
	
	private static void addRoundKey(byte[][] state, byte[] roundKey) {
		// debug
//		out.println("Roundkey:");
//		for(char c : roundKey) out.print(Integer.toHexString((int)c));
//		out.println("\n");
		
		for(int i = 0; i < 4; i++) {
			for(int j = 0; j < 4; j++) {
				state[j][i] ^= roundKey[4 * i + j];
			}
		}
	}
	
	private static void keyExpansionCore(byte[] arr, int rConIndex) {
		// arr is tmp from keyExpansion()
		byte[] tmp = new byte[4];
		
		// rotate
		for(int i = 0; i < 4; i++) {
			tmp[i] = arr[(i + 1) % 4];
		}
		
		// replace
		for(int i = 0; i < 4; i++) {
			arr[i] = tmp[i];
		}
		
//		char tmp = arr[0];
//		arr[0] = arr[1];
//		arr[1] = arr[2];
//		arr[2] = arr[3];
//		arr[3] = tmp;
		
		// sbox
		for(int i = 0; i < 4; i++) {
			arr[i] = sbox[arr[i] & 0xff];
		}
		
		// rcon first byte
		arr[0] ^= rcon[rConIndex];
		
	}
	
	// expand 16 byte key to 176 byte key
	private static void keyExpansion(byte[] inputKey, byte[] expandedKey) {
		for(int i = 0; i < 16; i++) {
			expandedKey[i] = inputKey[i];
		}
		
		int bytesGenerated = 16;
		int rconIteration = 1;
		byte tmp[] = new byte[4];

		// 176 is 10 rounds + original key since each key is 16 bytes each
		while(bytesGenerated < 176) {
			for(int i = 0; i < 4; i++) {
				tmp[i] = expandedKey[i + bytesGenerated - 4];
			}
			
			// Call the core once for each 16 byte key
			// modifies tmp 
			if(bytesGenerated % 16 == 0) 
				keyExpansionCore(tmp, rconIteration++);
			
			for(int i = 0; i < 4; i++) {
				expandedKey[bytesGenerated] = (byte)(expandedKey[bytesGenerated - 16] ^ tmp[i]);
				bytesGenerated++;
			}
		}
	}
	
	private static void encrypt(byte[] input, byte[] key) {
		byte[][] state = new byte[4][4];
		
		for(int i = 0; i < 4; i++) {
			for(int j = 0; j < 4; j++) {
				state[j][i] = input[4 * i + j];
			}
		}
		
		// placement?
		byte[] expandedKey = new byte[176];
		keyExpansion(key, expandedKey);
		addRoundKey(state, key);
		
		// debug
		out.println("After addRoundKey("+0+"):");
		// out.println(buildString(state).toUpperCase());
		printBinary(state);
		
		int numberOfRounds = 9;
		
		for(int i = 0; i < numberOfRounds; i++) {
			subBytes(state);
			shiftRows(state);
			mixColumns(state);
			// correct param for expandedKey?
			addRoundKey(state, Arrays.copyOfRange(expandedKey, 16 * (i+1), 16 * (i+1) + 16));
			// debug
			out.println("After addRoundKey("+(i+1)+"):");
			// out.println(buildString(state));
			printBinary(state);
		}
		
		//final round 
		subBytes(state);
		shiftRows(state);
		addRoundKey(state, Arrays.copyOfRange(expandedKey, 160, 176));
		
		// debug
		out.println("After addRoundKey("+10+"):");
		// out.println(buildString(state));
		printBinary(state);
	}
	
	private static void decrypt(byte[] input, byte[] key) {
		byte[][] state = new byte[4][4];
		
		for(int i = 0; i < 4; i++) {
			for(int j = 0; j < 4; j++) {
				state[j][i] = input[4 * i + j];
			}
		}
		
		byte[] expandedKey = new byte[176];
		keyExpansion(key, expandedKey);
		addRoundKey(state, Arrays.copyOfRange(expandedKey, 160, 176));
		out.println("After addRoundKey("+10+"):");
		// out.println(buildString(state).toUpperCase());
		printBinary(state);
		
		
        for (int round = 8; round >= 0; round--) { 
        		invShiftRows(state);
        		invSubBytes(state);
        		addRoundKey(state, Arrays.copyOfRange(expandedKey, 16 * (round+1), 16 * (round+1) + 16)); // same as encrypt
        		out.println("After addRoundKey("+(round+1)+"):");
    			// out.println(buildString(state));
        		printBinary(state);
        		invMixColumns(state);
        }
        
        invShiftRows(state);
		invSubBytes(state);
		addRoundKey(state, Arrays.copyOfRange(expandedKey, 0, 16));
		out.println("After addRoundKey("+0+"):");
		// out.println(buildString(state));
		printBinary(state);
        
	}
	
	private static String buildString(byte[][] input) {
		StringBuilder res = new StringBuilder();
		
		for(int i = 0; i < 4; i++) {
			for(int j = 0; j < 4; j++) {
				res.append(String.format("%02X", (int)input[j][i]));
			}
		}
		
		return res.toString().toUpperCase();
	}
	
	private static void printBinary(byte[][] input) {
		int len = input.length * input[0].length;
		byte[] tmp = new byte[len];
		
		int counter = 0;
		for(int i = 0; i < input.length; i++) {
			for(int j = 0; j < input.length; j++) {
				tmp[counter++] = input[j][i];
			}
		}
		System.out.println(javax.xml.bind.DatatypeConverter.printHexBinary(tmp));
 	}
	


	// Zero Sum Padding. Pad with zero except the last byte which is equal to the length of the padding
	// 123456789
	// 123456789000006
	private static byte[] padInput(byte[] input) {
		out.println("Input before padding: " + Arrays.toString(input)); // debugging step
		byte[] res = new byte[16];
		for (int i = 0; i < input.length; i++) { 
			res[i] = input[i]; 
		}
		for (int i = input.length; i < 15; i++) {
			res[i] = (byte) 0;
		}
		res[15] = (byte) (16 - input.length);
		out.println("Padded input is: " + Arrays.toString(res)); // debugging step
		return input;
	}
	
	
	public static void main(String[] args) throws IOException {
        AES test = new AES();
        
        // for testing
        byte[] key = new byte[16]; // all 0's hardcoded for now
        
		byte[] input = new byte[16];
        // byte[] test = {1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F'};
        
        char[] byteTest = new char[] { 
        		//0001 0203 0405 0607 0809 0a0b 0c0d 0e0f
        		0x00, 0x01, 0x02, 0x03,
        		0x04, 0x05, 0x06, 0x07,
        		0x08, 0x09, 0x0a, 0x0b,
        		0x0c, 0x0d, 0x0e, 0x0f
        };



        byte[] dInput = new byte[]{
        		(byte) 0x66, (byte) 0xe9, (byte) 0x4b, (byte) 0xd4, (byte) 0xef, (byte) 0x8a, (byte) 0x2c, (byte) 0x3b, (byte) 0x88, (byte) 0x4c,
                (byte) 0xfa, (byte) 0x59, (byte) 0xca, (byte) 0x34, (byte) 0x2b, (byte) 0x2e
        		};
      


//		if (input.length() % 16 != 0) {
//			input = padInput(input);
//		}

		if (input.length % 16 != 0) {
			input = padInput(input);
		}
        


        // test.encrypt(input, key);
		test.decrypt(dInput, key);

    }
}
